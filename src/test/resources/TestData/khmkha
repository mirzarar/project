package com.mystore.pageobjects;

import java.io.File;
import java.util.List;
import java.util.Random;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.IOException;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.mystore.actiondriver.Action;
import com.mystore.base.BaseClass;



public class ImortmoduleObjects2 extends BaseClass{


	public static void setClipBoard(String file) {
		StringSelection obj= new StringSelection(file);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(obj, null);
	}
	public static void uploadFile(String filePath) throws AWTException {
		setClipBoard(filePath);
		Robot rb = new Robot();
		rb.keyPress(KeyEvent.VK_CONTROL);
		rb.keyPress(KeyEvent.VK_V);
		rb.keyRelease(KeyEvent.VK_CONTROL);
		rb.keyRelease(KeyEvent.VK_V);
		rb.keyPress(KeyEvent.VK_ENTER); 
		rb.keyRelease(KeyEvent.VK_ENTER); 
}
	Action action= new Action();
	
	@FindBy(xpath="//i[@class='flaticon flaticon-product d-flex align-items-center icon-size']")
	private WebElement productsbtn;
	
	@FindBy(xpath="//input[@id='import_proceed']")
	private WebElement proceedbtn;
	
	@FindBy(xpath="//div[@class='sidebar-sub-menu bg-light-grey-1 border-0 sidebar-width active']//a[8]")
	private WebElement importbtn;
	
	@FindBy(xpath="//div[@class='box__input text-center']")
	private WebElement csv;
	
	@FindBy(xpath="//select[@name='nodes[data][0][from][]']")
	private WebElement index;
	
	@FindBy(xpath="//button[@id='next-btn']")
	private WebElement nextbtn;
	
	@FindBy(xpath="//input[@name='nodes[data][1][with]']")
	private WebElement separator;
	
	@FindBy(xpath="//input[@name='nodes[data][2][with]']")
	private WebElement glue;
	
	@FindBy(xpath="//div[@class='form-control short_code_div']")
	private WebElement mergeadvance;
	
	@FindBy(xpath="//input[@name='nodes[data][6][replace]']")
	private WebElement searchfield;
	
	@FindBy(xpath="//input[@name='nodes[data][6][with]']")
	private WebElement withfield;
	
	
	@FindBy(xpath="//a[normalize-space()='Add']")
	private WebElement addbtn;
	
	@FindBy(xpath="//button[@id='vlookup_add']")
	private WebElement vlookadd;
	
	@FindBy(xpath="//input[@name='name']")
	private WebElement inputname;
	
	@FindBy(xpath="//textarea[@id='lookup_values']")
	private WebElement inputvalues;
	
	@FindBy(xpath="//button[@id='vlookup_btn']")
	private WebElement createbtn;
	
	@FindBy(xpath="//div[@id='vlookup_product']//span[@aria-hidden='true'][normalize-space()='Ã—']")
	private WebElement cancelbtn;
	
	@FindBy(xpath="//input[@name='nodes[data][10][with]']")
	private WebElement calculateinput;
	
	@FindBy(xpath="//input[@name='nodes[data][11][with]']")
	private WebElement withinput;
	
	@FindBy(xpath="//h5[@class='m-0 p-2 Roboto regular']")
	private WebElement addoprtnbtn;
	
	@FindBy(xpath="//div[23]//div[4]//div[1]//div[2]//div[1]//a[1]//img[1]")
	private WebElement D1;
	
	@FindBy(xpath="//div[24]//div[4]//div[1]//div[2]//div[1]//a[1]//img[1]")
	private WebElement D2;
	
	@FindBy(xpath="//input[@id='ignore_unmapped']")
	private WebElement ignoreimportclick;
	
	@FindBy(xpath="//button[@id='pro_imp_btn']")
	private WebElement nextclick;
	
	@FindBy(xpath="//div[@id='template_checkbox_div']//label[@for='customSwitch1'][normalize-space()='Yes']")
	private WebElement templatebtn;
	
	@FindBy(xpath="//div[@id='import_product']//input[@name='temp_name']")
	private WebElement templateinput;
	
	
	@FindBy(xpath="//input[@id='pro_imp_start_btn']")
	private WebElement stratimportbtn;
	
	@FindBy(xpath="//button[@id='template_submit']")
	private WebElement csvnxtbtn;
	
	@FindBy(xpath="//button[@id='create_template']")
	private WebElement createnewtemplate;
	
	@FindBy(xpath="/html[1]/body[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[2]")
	private WebElement productpage;

	@FindBy(xpath="//a[normalize-space()='SEO Attributes']")
	private WebElement attributeclick;
	


	
	public void importcsv() throws InterruptedException, AWTException, IOException {
	    PageFactory.initElements(getDriver(), this);
	    action.click(getDriver(), productsbtn);
	    action.click(getDriver(), importbtn);
	    action.click(getDriver(), csv);
	    action.implicitWait(getDriver(), 30000);
	    Thread.sleep(3000);
	    uploadFile("exampl");
	    // Copy the file to the resources directory
	    File sourceFile = new File("C:\\Users\\hamza\\exampl.csv");
	    File destFile = new File("src/test/resources/TestData/file.csv");
	    copyFile(sourceFile, destFile);
	    // Upload the file
	    uploadFile("file.csv");
	    Thread.sleep(3000);
	    action.click(getDriver(), nextbtn);
	    if (action.isDisplayed(getDriver(), createnewtemplate)) {
	        action.click(getDriver(), createnewtemplate);
	    }
	}
	private void copyFile(File source, File dest) throws IOException {
	    try (FileInputStream fis = new FileInputStream(source);
	         FileOutputStream fos = new FileOutputStream(dest)) {
	        byte[] buffer = new byte[1024];
	        int length;
	        while ((length = fis.read(buffer)) > 0) {
	            fos.write(buffer, 0, length);
	        }
	    }
	}

public void maping() throws InterruptedException, AWTException, IOException {
	
	


	action.click(getDriver(), nextbtn);
	Thread.sleep(5000);
	if (action.isDisplayed(getDriver(), proceedbtn)) {
		action.click(getDriver(), proceedbtn);
	}
	else
	{ System.out.print("ook");}
	
	if (action.isDisplayed(getDriver(), createnewtemplate)) {
		action.click(getDriver(), createnewtemplate);
	}
	else
	{ System.out.print("ok");}

	Thread.sleep(8000);
	
	
	action.JSClick(getDriver(), nextclick);
	Thread.sleep(8000);
	
	WebElement element12 = getDriver().findElement(By.xpath("//div[@id='row_container']//div//div[1]//div[1]//div[1]//div[2]//div[1]//select[1]"));
	Select x12 = new Select(element12);
	List<WebElement> options = x12.getOptions();
	for (WebElement option : options) {
	  if (option.getText().contains("SKU")) {
	    x12.selectByVisibleText(option.getText());
	    break;
	  }
	}

	WebElement element1 = getDriver().findElement(By.xpath("//select[@name='nodes[data][0][to][]']"));
	Select x1 = new Select(element1);
	x1.selectByVisibleText("SKU");
	
	

	
	WebElement element123 = getDriver().findElement(By.xpath("//div[@id='add_row']//div[2]//div[1]//div[1]//div[2]//div[1]//select[1]"));
	Select x123 = new Select(element123);
	x123.selectByVisibleText("Title");

	WebElement element122 = getDriver().findElement(By.xpath("//div[@id='add_row']//div[2]//div[4]//div[1]//div[1]//div[1]//select[1]"));
	Select x122 = new Select(element122);
	x122.selectByVisibleText("Product Name");
	
	
	
	WebElement element1233 = getDriver().findElement(By.xpath("//select[@name='nodes[data][4][to][]']"));
	Select x1233 = new Select(element1233);
	x1233.selectByVisibleText("Category");
	

	WebElement element1224 = getDriver().findElement(By.xpath("//div[3]//div[4]//div[1]//div[1]//div[1]//select[1]"));
	Select x1224 = new Select(element1224);
	x1224.selectByVisibleText("Description");

	WebElement element12333 = getDriver().findElement(By.xpath("//select[@name='nodes[data][6][to][]']"));
	Select x12333 = new Select(element12333);
	x12333.selectByVisibleText("Description");
	
	
	
	WebElement element12244 = getDriver().findElement(By.xpath("//select[@name='nodes[data][7][from][]']"));
	Select x12244 = new Select(element12244);
	List<WebElement> options11 = x12244.getOptions();
	for (WebElement option11 : options11) {
	    if (option11.getText().toLowerCase().contains("image")) {
	        x12244.selectByVisibleText(option11.getText());
	        break;
	    }
	}
	
	
	
	
	
	WebElement element123333 = getDriver().findElement(By.xpath("//select[@name='nodes[data][7][to][]']"));
	Select x123333 = new Select(element123333);
	x123333.selectByVisibleText("Media");	
	
	
	
	
	
	
	action.JSClick(getDriver(), ignoreimportclick);
	action.JSClick(getDriver(), nextclick);	
	WebDriverWait wait = new WebDriverWait(getDriver(), 10);
	WebElement languageDropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='import_product']//select[@id='version']")));
	Select selectLanguage = new Select(languageDropdown);
	selectLanguage.selectByVisibleText("EN-US");
	WebElement storeDropdown = getDriver().findElement(By.xpath("//div[@id='import_product']//select[@id='catalog']"));
	Select selectStore = new Select(storeDropdown);
	selectStore.selectByVisibleText("Default");
	action.JSClick(getDriver(), templatebtn);
	action.type(templateinput, "new template");
	action.JSClick(getDriver(), stratimportbtn);

}

public void importmodule2() throws InterruptedException, AWTException, IOException {
	  getDriver().get("https://app.getapimio.com/products");

	  Random random = new Random();
	    int randomPage = random.nextInt(10) + 1; // generates a random number between 1 and 10		 
	    getDriver().get("https://app.getapimio.com/products?page=" + (randomPage + 1));
	    WebElement productTable = getDriver().findElement(By.id("main-table"));
	    List<WebElement> rows = productTable.findElements(By.xpath(".//tbody/tr"));
	    int randomIndex = random.nextInt(rows.size()); // generates a random number between 0 and the number of products in the table
	   WebElement selectedProduct = rows.get(randomIndex);
	    String SKU = selectedProduct.findElement(By.xpath(".//td[2]")).getText();
	    System.out.println("SKU: " + SKU);
	    System.out.println("Index: " + randomIndex);
	    System.out.println("Page: " + (randomPage + 1));
	    
	    WebElement pagination = getDriver().findElement(By.cssSelector(".pagination"));
	    List<WebElement> list = pagination.findElements(By.tagName("li"));

	    int secondLastIndex = list.size() - 2;
	    WebElement secondLast = list.get(secondLastIndex);

	    String secondLastPageNumber = secondLast.findElement(By.tagName("a")).getText();
	    System.out.println("The last page number is: " + secondLastPageNumber);
}}
